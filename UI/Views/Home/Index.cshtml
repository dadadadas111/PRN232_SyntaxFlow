@{
    ViewData["Title"] = "Home Page";
    var apiBaseUrl = "https://localhost:7174/";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Blockly Editor</h2>
        <!-- Remove the inline auth buttons since they're now in the layout -->
    </div>
    <script src="https://unpkg.com/blockly/blockly.min.js"></script>
    <div id="blocklyDiv" style="height: 400px; width: 100%; margin-bottom: 10px"></div>
    <div class="d-flex align-items-center gap-2 mb-3">
        <button onclick="exportJson()" class="btn btn-secondary">Export JSON</button>
        <button onclick="saveBlocky()" class="btn btn-info">Save Block</button>
        <div class="d-flex align-items-center gap-2">
            <label for="languageSelect" class="form-label mb-0">Generate Code:</label>
            <select id="languageSelect" class="form-select" style="width: auto;">
                <optgroup label="Native Support (Fast)">
                    <option value="py">Python</option>
                    <option value="js">JavaScript</option>
                </optgroup>
                <optgroup label="AI-Powered (Slower, requires internet)">
                    <option value="java">Java</option>
                    <option value="cpp">C++</option>
                    <option value="csharp">C#</option>
                    <option value="go">Go</option>
                    <option value="rust">Rust</option>
                    <option value="php">PHP</option>
                    <option value="ruby">Ruby</option>
                    <option value="swift">Swift</option>
                    <option value="kotlin">Kotlin</option>
                    <option value="dart">Dart</option>
                </optgroup>
            </select>
            <button onclick="sendToApi()" class="btn btn-success">Generate</button>
        </div>
        <span id="apiStatus" class="text-muted"></span>
    </div>
    
    <!-- AI Usage Display -->
    <div id="aiUsageDisplay" class="alert alert-info" style="display: none;">
        <i class="bi bi-robot"></i>
        <span id="aiUsageText">AI Translations: 0/5 used today</span>
        <small class="d-block text-muted" id="aiUsageReset">Resets at: --</small>
    </div>
    <!-- Email Verification Notification (injected by JS) -->
    <div id="emailVerificationContainer"></div>
    <div style="position:relative;">
        <pre id="codeDisplay" style="background:#f8f9fa; padding:1em; margin-top:1em; white-space:pre-wrap; word-break:break-all;"></pre>
        <button id="copyCodeBtn" title="Copy code" style="position:absolute;top:10px;right:10px;z-index:2;background:transparent;border:none;">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#888" viewBox="0 0 16 16">
                <rect width="10" height="12" x="3" y="2" rx="2" fill="#eee" stroke="#888" stroke-width="1"/>
                <rect width="8" height="10" x="4" y="3" rx="1" fill="none" stroke="#888" stroke-width="1"/>
            </svg>
        </button>
    </div>
</div>

<!-- Auth Modal (Login/Register) -->
<div class="modal fade" id="authModal" tabindex="-1" aria-labelledby="authModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="authModalLabel"><span id="authModalTitle">Login</span></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Login Form -->
        <form id="loginForm" onsubmit="return login(event)" style="display:block;">
            <div class="mb-2">
                <input type="text" id="username" placeholder="Username" class="form-control" required />
            </div>
            <div class="mb-2">
                <input type="password" id="password" placeholder="Password" class="form-control" required />
            </div>
            <span id="loginStatus" class="text-danger"></span>
            <div class="mt-3 d-flex flex-column gap-2">
                <button type="submit" class="btn btn-primary w-100">Login</button>
                <button type="button" class="btn btn-link w-100" onclick="showRegister()">Don't have an account? Register</button>
            </div>
        </form>
        <!-- Register Form -->
        <form id="registerForm" onsubmit="return register(event)" style="display:none;">
            <div class="mb-2">
                <input type="text" id="regUsername" placeholder="Username" class="form-control" required />
            </div>
            <div class="mb-2">
                <input type="password" id="regPassword" placeholder="Password" class="form-control" required />
            </div>
            <div class="mb-2">
                <input type="password" id="regConfirmPassword" placeholder="Confirm Password" class="form-control" required />
            </div>
            <span id="registerStatus" class="text-danger"></span>
            <div class="mt-3 d-flex flex-column gap-2">
                <button type="submit" class="btn btn-primary w-100">Register</button>
                <button type="button" class="btn btn-link w-100" onclick="showLogin()">Already have an account? Login</button>
            </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Save Block Modal -->
<div class="modal fade" id="saveBlockModal" tabindex="-1" aria-labelledby="saveBlockModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="saveBlockModalLabel">Save Block</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="saveBlockForm" onsubmit="return submitSaveBlock(event)">
            <div class="mb-3">
                <label for="saveBlockName" class="form-label">Block Name</label>
                <input type="text" id="saveBlockName" placeholder="Enter block name" class="form-control" required maxlength="200" />
            </div>
            <div class="mb-3">
                <label for="saveBlockTags" class="form-label">Tags</label>
                <input type="text" id="saveBlockTags" placeholder="Enter tags separated by commas (e.g., math, logic, beginner)" class="form-control" />
                <div class="form-text">Separate multiple tags with commas</div>
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="saveBlockPublic" />
                    <label class="form-check-label" for="saveBlockPublic">
                        <i class="bi bi-globe"></i> Make this block public
                    </label>
                    <div class="form-text">Public blocks can be viewed and forked by other users</div>
                </div>
            </div>
            <span id="saveStatus" class="text-danger"></span>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary w-100">Save Block</button>
            </div>
        </form>
      </div>
    </div>
  </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Email Verification JS -->
<script src="~/js/emailVerification.js"></script>

<script>
const toolbox = `
<xml>
  <category name="Logic" colour="210">
    <block type="controls_if"></block>
    <block type="logic_compare"></block>
    <block type="logic_operation"></block>
    <block type="logic_negate"></block>
    <block type="logic_boolean"></block>
    <block type="logic_null"></block>
    <block type="logic_ternary"></block>
  </category>
  <category name="Loops" colour="120">
    <block type="controls_repeat_ext"></block>
    <block type="controls_whileUntil"></block>
    <block type="controls_for"></block>
    <block type="controls_forEach"></block>
    <block type="controls_flow_statements"></block>
  </category>
  <category name="Math" colour="230">
    <block type="math_number"></block>
    <block type="math_arithmetic"></block>
    <block type="math_single"></block>
    <block type="math_trig"></block>
    <block type="math_constant"></block>
    <block type="math_number_property"></block>
    <block type="math_round"></block>
    <block type="math_modulo"></block>
    <block type="math_random_int"></block>
    <block type="math_random_float"></block>
  </category>
  <category name="Text" colour="160">
    <block type="text"></block>
    <block type="text_join"></block>
    <block type="text_append"></block>
    <block type="text_length"></block>
    <block type="text_isEmpty"></block>
    <block type="text_indexOf"></block>
    <block type="text_charAt"></block>
    <block type="text_getSubstring"></block>
    <block type="text_changeCase"></block>
    <block type="text_trim"></block>
    <block type="text_print"></block>
  </category>
  <category name="Lists" colour="260">
    <block type="lists_create_with"></block>
    <block type="lists_repeat"></block>
    <block type="lists_length"></block>
    <block type="lists_isEmpty"></block>
    @* <block type="lists_indexOf"></block>
    <block type="lists_getIndex"></block>
    <block type="lists_setIndex"></block>
    <block type="lists_getSublist"></block>
    <block type="lists_split"></block>
    <block type="lists_sort"></block> *@
  </category>
  <sep></sep>
  <category name="Variables" colour="330" custom="VARIABLE"></category>
  <category name="Functions" colour="290" custom="PROCEDURE"></category>
</xml>
`;

const workspace = Blockly.inject('blocklyDiv', {toolbox});

function exportJson() {
    const json = Blockly.serialization.workspaces.save(workspace);
    document.getElementById("codeDisplay").innerText = JSON.stringify(json, null, 2);
}

// Add saveBlocky function as placeholder
function saveBlocky() {
    const jwt = localStorage.getItem("token");
    if (!jwt) {
        alert('Please login first.');
        return;
    }
    
    const json = Blockly.serialization.workspaces.save(workspace);
    
    // Show save modal
    document.getElementById('saveBlockName').value = '';
    document.getElementById('saveBlockTags').value = '';
    document.getElementById('saveBlockPublic').checked = false;
    document.getElementById('saveStatus').innerText = '';
    var saveModal = new bootstrap.Modal(document.getElementById('saveBlockModal'));
    saveModal.show();
}

// Use Razor-injected base URL
var apiBaseUrl = '@apiBaseUrl';

function login(e) {
    e.preventDefault();
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
    document.getElementById("loginStatus").innerText = "";
    fetch(apiBaseUrl + "api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
    })
    .then(res => res.json())
    .then(data => {
        if (data.token) {
            localStorage.setItem("token", data.token);
            const username = getUsernameFromToken(data.token);
            updateAuthUI(true, username);
            var modal = bootstrap.Modal.getInstance(document.getElementById('authModal'));
            if (modal) modal.hide();
            document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
            document.body.classList.remove('modal-open');
            document.body.style = '';
            // Set email verification status from response
            if (typeof window.setEmailVerificationStatus === 'function') {
                window.setEmailVerificationStatus(data.email_verified, data.email);
            }
        } else {
            document.getElementById("loginStatus").innerText = "Invalid username or password.";
        }
    })
    .catch(() => document.getElementById("loginStatus").innerText = "Error");
    return false;
}

function setJwtStatus(isLoggedIn) {
    // This function is now handled by the global updateAuthUI function
    const token = localStorage.getItem("token");
    if (token && isLoggedIn) {
        const username = getUsernameFromToken(token);
        updateAuthUI(true, username);
    } else {
        updateAuthUI(false);
    }
}

document.getElementById("logoutBtn").onclick = function() {
    localStorage.removeItem("token");
    setJwtStatus(false);
};

function checkJwt() {
    const jwt = localStorage.getItem("token");
    setJwtStatus(!!jwt);
}

window.onload = checkJwt;

function sendToApi() {
    const jwt = localStorage.getItem("token");
    const json = Blockly.serialization.workspaces.save(workspace);
    const selectedLang = document.getElementById("languageSelect").value;
    document.getElementById("apiStatus").innerText = "";
    
    // if (!jwt) {
    //     document.getElementById("apiStatus").innerText = "Please login first.";
    //     return;
    // }
    
    const nativeLanguages = ['py', 'js'];
    const isNative = nativeLanguages.includes(selectedLang);
    
    // Show loading state
    const langName = getLanguageName(selectedLang);
    document.getElementById("apiStatus").innerHTML = `<i class="spinner-border spinner-border-sm me-1"></i>Generating ${langName} code${isNative ? '...' : ' using AI...'}`;
    
    if (isNative) {
        // Use regular API for native languages
        fetch(apiBaseUrl + `api/translate?lang=${selectedLang}`, {
            method: "POST",
            headers: {
                "Authorization": "Bearer " + jwt,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(json)
        })
        .then(res => {
            if (!res.ok) throw new Error("API error: " + res.status);
            return res.text();
        })
        .then(code => {
            document.getElementById("codeDisplay").innerText = code;
            document.getElementById("apiStatus").innerHTML = `<span class="text-success"><i class="bi bi-check-circle"></i> ${langName} code generated successfully!</span>`;
        })
        .catch(err => {
            document.getElementById("apiStatus").innerHTML = `<span class="text-danger"><i class="bi bi-exclamation-circle"></i> ${err.message || "API error"}</span>`;
        });
    } else {
        // Use streaming API for AI-powered languages
        generateCodeWithStreaming(selectedLang, json, jwt, langName);
    }
}

function generateCodeWithStreaming(language, json, jwt, langName) {
    const codeDisplay = document.getElementById("codeDisplay");
    const statusElement = document.getElementById("apiStatus");
    
    // Clear previous code
    codeDisplay.innerText = "";
    
    fetch(apiBaseUrl + `api/translate/stream?lang=${language}`, {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + jwt,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(json)
    })
    .then(response => {
        if (!response.ok) {
            if (response.status === 429) {
                throw new Error("Daily AI translation limit exceeded. Please try again tomorrow.");
            }
            throw new Error(`HTTP ${response.status}`);
        }
        
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        
        function readStream() {
            reader.read().then(({ done, value }) => {
                if (done) {
                    statusElement.innerHTML = `<span class="text-success"><i class="bi bi-check-circle"></i> ${langName} code generated using AI!</span>`;
                    // Refresh AI usage after successful generation
                    fetchAiUsage();
                    return;
                }
                
                const chunk = decoder.decode(value, { stream: true });
                
                // Check for usage limit error in stream
                if (chunk.includes("Daily AI translation limit exceeded")) {
                    codeDisplay.innerText = chunk;
                    statusElement.innerHTML = `<span class="text-danger"><i class="bi bi-exclamation-circle"></i> AI usage limit exceeded</span>`;
                    fetchAiUsage(); // Refresh usage display
                    return;
                }
                
                codeDisplay.innerText += chunk;
                
                // Auto-scroll to bottom
                codeDisplay.scrollTop = codeDisplay.scrollHeight;
                
                // Continue reading
                readStream();
            }).catch(err => {
                console.error('Stream reading error:', err);
                statusElement.innerHTML = `<span class="text-danger"><i class="bi bi-exclamation-circle"></i> Stream error: ${err.message}</span>`;
            });
        }
        
        readStream();
    })
    .catch(err => {
        console.error('Streaming request error:', err);
        statusElement.innerHTML = `<span class="text-danger"><i class="bi bi-exclamation-circle"></i> ${err.message || "Streaming API error"}</span>`;
        if (err.message.includes("limit exceeded")) {
            fetchAiUsage(); // Refresh usage display
        }
    });
}

// Function to update AI usage display
function updateAiUsageDisplay(usageInfo) {
    const aiUsageDisplay = document.getElementById('aiUsageDisplay');
    const aiUsageText = document.getElementById('aiUsageText');
    const aiUsageReset = document.getElementById('aiUsageReset');
    
    if (usageInfo) {
        aiUsageText.textContent = `AI Translations: ${usageInfo.currentUsage}/${usageInfo.dailyLimit} used today`;
        aiUsageReset.textContent = `Resets at: ${new Date(usageInfo.resetTime).toLocaleString()}`;
        
        // Change alert type based on usage
        aiUsageDisplay.className = 'alert ' + (
            usageInfo.remainingUsage === 0 ? 'alert-danger' :
            usageInfo.remainingUsage <= 1 ? 'alert-warning' : 'alert-info'
        );
        
        aiUsageDisplay.style.display = 'block';
    } else {
        aiUsageDisplay.style.display = 'none';
    }
}

// Function to fetch AI usage
async function fetchAiUsage() {
    const jwt = localStorage.getItem("token");
    if (!jwt) return;
    
    try {
        const response = await fetch(apiBaseUrl + "api/translate/ai-usage", {
            headers: {
                "Authorization": "Bearer " + jwt
            }
        });
        
        if (response.ok) {
            const usageInfo = await response.json();
            updateAiUsageDisplay(usageInfo);
        }
    } catch (error) {
        console.error('Error fetching AI usage:', error);
    }
}

// Fetch AI usage on page load if user is logged in
window.addEventListener('load', function() {
    checkJwt();
    fetchAiUsage();
});

function getLanguageName(code) {
    const languageNames = {
        'py': 'Python',
        'js': 'JavaScript',
        'java': 'Java',
        'cpp': 'C++',
        'csharp': 'C#',
        'go': 'Go',
        'rust': 'Rust',
        'php': 'PHP',
        'ruby': 'Ruby',
        'swift': 'Swift',
        'kotlin': 'Kotlin',
        'dart': 'Dart'
    };
    return languageNames[code] || code.toUpperCase();
}

function showCode() {
    const code = Blockly.JavaScript.workspaceToCode(workspace);
    document.getElementById("codeDisplay").innerText = code;
}

function runCode() {
    const code = Blockly.JavaScript.workspaceToCode(workspace);
    try {
        // eslint-disable-next-line no-eval
        eval(code);
    } catch (e) {
        document.getElementById("codeDisplay").innerText = e.toString();
    }
}

document.getElementById("copyCodeBtn").onclick = function() {
    const code = document.getElementById("codeDisplay").innerText;
    if (navigator.clipboard) {
        navigator.clipboard.writeText(code);
    } else {
        // fallback for old browsers
        const textarea = document.createElement("textarea");
        textarea.value = code;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand("copy");
        document.body.removeChild(textarea);
    }
};

// Auth modal logic
function showLogin() {
    document.getElementById('loginForm').style.display = 'block';
    document.getElementById('registerForm').style.display = 'none';
    document.getElementById('authModalTitle').innerText = 'Login';
    document.getElementById('loginStatus').innerText = '';
    document.getElementById('registerStatus').innerText = '';
}
function showRegister() {
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('registerForm').style.display = 'block';
    document.getElementById('authModalTitle').innerText = 'Register';
    document.getElementById('loginStatus').innerText = '';
    document.getElementById('registerStatus').innerText = '';
}
// Open modal with correct form
const loginBtn = document.getElementById('loginBtn');
if (loginBtn) {
    loginBtn.setAttribute('data-bs-target', '#authModal');
    loginBtn.onclick = function() { showLogin(); };
}
const registerBtn = document.getElementById('registerBtn');
if (registerBtn) {
    registerBtn.setAttribute('data-bs-target', '#authModal');
    registerBtn.onclick = function() { showRegister(); };
}
// Remove old modals from DOM if present
const oldLoginModal = document.getElementById('loginModal');
if (oldLoginModal) oldLoginModal.remove();
const oldRegisterModal = document.getElementById('registerModal');
if (oldRegisterModal) oldRegisterModal.remove();

// Placeholder register logic
function register(e) {
    e.preventDefault();
    var username = document.getElementById('regUsername').value;
    var password = document.getElementById('regPassword').value;
    var confirmPassword = document.getElementById('regConfirmPassword').value;
    var status = document.getElementById('registerStatus');
    status.innerText = '';
    if (password !== confirmPassword) {
        status.innerText = 'Passwords do not match.';
        return false;
    }
    fetch(apiBaseUrl + "api/auth/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password })
    })
    .then(async res => {
        let data;
        try { data = await res.json(); } catch { data = {}; }
        if (!res.ok) {
            if (Array.isArray(data.errors)) {
                status.innerHTML = data.errors.map(e => `<div>${e}</div>`).join('');
            } else {
                status.innerText = data.message || 'Registration failed.';
            }
            return;
        }
        if (data.token) {
            // Registration successful, use token to login
            localStorage.setItem("token", data.token);
            const username = getUsernameFromToken(data.token);
            updateAuthUI(true, username);
            var modal = bootstrap.Modal.getInstance(document.getElementById('authModal'));
            if (modal) modal.hide();
            document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
            document.body.classList.remove('modal-open');
            document.body.style = '';
            // Set email verification status from response
            if (typeof window.setEmailVerificationStatus === 'function') {
                window.setEmailVerificationStatus(data.email_verified, data.email);
            }
        } else {
            status.innerText = data.message || 'Registration failed.';
        }
    })
    .catch(() => {
        status.innerText = 'Registration error.';
    });
    return false;
}

// Save block function
function submitSaveBlock(e) {
    e.preventDefault();
    const jwt = localStorage.getItem("token");
    const blockName = document.getElementById('saveBlockName').value;
    const blockTags = document.getElementById('saveBlockTags').value;
    const isPublic = document.getElementById('saveBlockPublic').checked;
    const status = document.getElementById('saveStatus');
    status.innerText = '';
    
    if (!jwt) {
        status.innerText = 'Please login first.';
        return false;
    }
    
    const json = Blockly.serialization.workspaces.save(workspace);
    const tags = blockTags ? blockTags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
    
    fetch(apiBaseUrl + "api/blocks", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + jwt,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            name: blockName,
            content: JSON.stringify(json),
            tags: tags,
            isPublic: isPublic
        })
    })
    .then(async res => {
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`Error ${res.status}: ${errorText}`);
        }
        return res.json();
    })
    .then(data => {
        status.innerText = '';
        var modal = bootstrap.Modal.getInstance(document.getElementById('saveBlockModal'));
        if (modal) modal.hide();
        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        document.body.classList.remove('modal-open');
        document.body.style = '';
        alert('Block saved successfully!');
    })
    .catch(err => {
        status.innerText = err.message || 'Save failed.';
    });
    return false;
}
</script>
