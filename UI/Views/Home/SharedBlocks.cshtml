@{
    ViewData["Title"] = "Shared Blocks";
    var apiBaseUrl = "https://localhost:7174/";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>Shared Blocks</h2>
            <p class="text-muted">Discover and explore blocks shared by the community</p>
        </div>
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary">
            <i class="bi bi-plus"></i> Create New Block
        </a>
    </div>

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" id="searchInput" class="form-control" placeholder="Search blocks by name or tags...">
                <button class="btn btn-outline-secondary" type="button" onclick="searchBlocks()">
                    <i class="bi bi-search"></i> Search
                </button>
            </div>
        </div>
        <div class="col-md-4">
            <select id="sortSelect" class="form-select" onchange="loadPublicBlocks()">
                <option value="created">Newest First</option>
                <option value="updated">Recently Updated</option>
                <option value="stars">Most Stars</option>
                <option value="forks">Most Forks</option>
            </select>
        </div>
    </div>

    <!-- Tags Filter -->
    <div class="mb-4">
        <div class="d-flex align-items-center flex-wrap">
            <span class="me-2 text-muted">Filter by tags:</span>
            <input type="text" id="tagsInput" class="form-control form-control-sm me-2" style="width: 200px;" 
                   placeholder="e.g., math,logic" onkeypress="handleTagsEnter(event)">
            <button class="btn btn-sm btn-outline-primary me-2" onclick="applyTagsFilter()">Apply</button>
            <button class="btn btn-sm btn-outline-secondary" onclick="clearFilters()">Clear All</button>
        </div>
        <div id="activeFilters" class="mt-2"></div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading shared blocks...</p>
    </div>

    <!-- Blocks Container -->
    <div id="blocksContainer" class="row" style="display: none;">
        <!-- Blocks will be dynamically loaded here -->
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-5" style="display: none;">
        <i class="bi bi-collection" style="font-size: 3rem; color: #6c757d;"></i>
        <h3 class="mt-3">No shared blocks found</h3>
        <p class="text-muted">Try adjusting your search criteria or be the first to share a block!</p>
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary">Create Your First Block</a>
    </div>

    <!-- Pagination -->
    <div id="paginationContainer" class="d-flex justify-content-center mt-4" style="display: none;">
        <nav aria-label="Blocks pagination">
            <ul class="pagination" id="pagination">
                <!-- Pagination will be dynamically generated -->
            </ul>
        </nav>
    </div>
</div>

<script>
var apiBaseUrl = '@apiBaseUrl';
var currentPage = 1;
var currentSearch = '';
var currentTags = [];
var currentSort = 'created';
var pageSize = 12;
var totalPages = 1;

document.addEventListener('DOMContentLoaded', function() {
    loadPublicBlocks();
});

async function loadPublicBlocks() {
    showLoading();
    
    try {
        const params = new URLSearchParams({
            page: currentPage,
            size: pageSize,
            sortBy: currentSort
        });
        
        if (currentSearch) {
            params.append('search', currentSearch);
        }
        
        if (currentTags.length > 0) {
            params.append('tags', currentTags.join(','));
        }
        
        const response = await fetch(`${apiBaseUrl}api/blocks/public?${params}`);
        
        if (!response.ok) {
            throw new Error('Failed to load blocks');
        }
        
        const blocks = await response.json();
        displayBlocks(blocks);
        
    } catch (error) {
        console.error('Error loading public blocks:', error);
        showError('Failed to load shared blocks. Please try again.');
    }
}

function displayBlocks(blocks) {
    const container = document.getElementById('blocksContainer');
    const emptyState = document.getElementById('emptyState');
    const loadingState = document.getElementById('loadingState');
    
    loadingState.style.display = 'none';
    
    if (!blocks || blocks.length === 0) {
        container.style.display = 'none';
        emptyState.style.display = 'block';
        document.getElementById('paginationContainer').style.display = 'none';
        return;
    }
    
    container.style.display = 'flex';
    emptyState.style.display = 'none';
    
    container.innerHTML = blocks.map(block => `
        <div class="col-md-6 col-lg-4 mb-4">
            <div class="card h-100 block-card" onclick="viewPublicBlock(${block.id})">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h5 class="card-title text-truncate" style="max-width: 200px;" title="${escapeHtml(block.name)}">
                            ${escapeHtml(block.name)}
                        </h5>
                        <span class="badge bg-success ms-2">
                            <i class="bi bi-globe"></i> Public
                        </span>
                    </div>
                    
                    <div class="mb-2">
                        <small class="text-muted">
                            <i class="bi bi-person"></i> by ${escapeHtml(block.ownerName)}
                        </small>
                    </div>
                    
                    <div class="mb-2">
                        ${block.tags.map(tag => `<span class="badge bg-secondary me-1">${escapeHtml(tag)}</span>`).join('')}
                    </div>
                    
                    <div class="mb-2 text-muted small">
                        <span class="me-3" title="Star count">
                            <i class="bi bi-star"></i> ${block.starCount}
                        </span>
                        <span title="Fork count">
                            <i class="bi bi-arrow-up-right-square"></i> ${block.forkCount}
                        </span>
                    </div>
                    
                    <p class="card-text text-muted small">
                        <i class="bi bi-calendar"></i> Created: ${new Date(block.createdAt).toLocaleDateString()}
                        <br>
                        <i class="bi bi-pencil"></i> Updated: ${new Date(block.updatedAt).toLocaleDateString()}
                    </p>
                </div>
                
                <div class="card-footer bg-transparent">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); viewPublicBlock(${block.id})">
                            <i class="bi bi-eye"></i> View
                        </button>
                        <div>
                            <button class="btn btn-outline-warning btn-sm me-1" onclick="event.stopPropagation(); starBlock(${block.id})" 
                                    title="Star this block">
                                <i class="bi bi-star"></i>
                            </button>
                            <button class="btn btn-outline-info btn-sm" onclick="event.stopPropagation(); forkBlock(${block.id})" 
                                    title="Fork this block">
                                <i class="bi bi-arrow-up-right-square"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    
    // Show pagination if needed (for now, basic implementation)
    updatePagination();
}

function viewPublicBlock(blockId) {
    // For now, redirect to a public view (we'll create this later)
    window.location.href = `@Url.Action("BlockDetail", "Home")?id=${blockId}&isPublic=true`;
}

function starBlock(blockId) {
    // Placeholder for star functionality (Phase 2)
    alert('Star functionality coming in Phase 2!');
}

function forkBlock(blockId) {
    // Placeholder for fork functionality (Phase 3)
    alert('Fork functionality coming in Phase 3!');
}

function searchBlocks() {
    currentSearch = document.getElementById('searchInput').value.trim();
    currentPage = 1;
    updateActiveFilters();
    loadPublicBlocks();
}

function applyTagsFilter() {
    const tagsInput = document.getElementById('tagsInput').value.trim();
    if (tagsInput) {
        currentTags = tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag);
    } else {
        currentTags = [];
    }
    currentPage = 1;
    updateActiveFilters();
    loadPublicBlocks();
}

function clearFilters() {
    currentSearch = '';
    currentTags = [];
    currentPage = 1;
    currentSort = 'created';
    
    document.getElementById('searchInput').value = '';
    document.getElementById('tagsInput').value = '';
    document.getElementById('sortSelect').value = 'created';
    
    updateActiveFilters();
    loadPublicBlocks();
}

function updateActiveFilters() {
    const filtersContainer = document.getElementById('activeFilters');
    const filters = [];
    
    if (currentSearch) {
        filters.push(`<span class="badge bg-primary me-1">Search: "${currentSearch}" 
                     <button type="button" class="btn-close btn-close-white ms-1" onclick="clearSearch()"></button></span>`);
    }
    
    currentTags.forEach(tag => {
        filters.push(`<span class="badge bg-info me-1">Tag: ${escapeHtml(tag)} 
                     <button type="button" class="btn-close btn-close-white ms-1" onclick="removeTag('${escapeHtml(tag)}')"></button></span>`);
    });
    
    filtersContainer.innerHTML = filters.join('');
}

function clearSearch() {
    currentSearch = '';
    document.getElementById('searchInput').value = '';
    updateActiveFilters();
    loadPublicBlocks();
}

function removeTag(tag) {
    currentTags = currentTags.filter(t => t !== tag);
    document.getElementById('tagsInput').value = currentTags.join(', ');
    updateActiveFilters();
    loadPublicBlocks();
}

function handleTagsEnter(event) {
    if (event.key === 'Enter') {
        applyTagsFilter();
    }
}

function showLoading() {
    document.getElementById('loadingState').style.display = 'block';
    document.getElementById('blocksContainer').style.display = 'none';
    document.getElementById('emptyState').style.display = 'none';
}

function showError(message) {
    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('blocksContainer').style.display = 'none';
    document.getElementById('emptyState').style.display = 'block';
    document.getElementById('emptyState').innerHTML = `
        <i class="bi bi-exclamation-triangle" style="font-size: 3rem; color: #dc3545;"></i>
        <h3 class="mt-3">Error</h3>
        <p class="text-muted">${message}</p>
        <button class="btn btn-primary" onclick="loadPublicBlocks()">Try Again</button>
    `;
}

function updatePagination() {
    // Basic pagination (can be enhanced later)
    const paginationContainer = document.getElementById('paginationContainer');
    const pagination = document.getElementById('pagination');
    
    // For now, simple implementation - will enhance with proper pagination later
    pagination.innerHTML = `
        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>
        </li>
        <li class="page-item active">
            <span class="page-link">${currentPage}</span>
        </li>
        <li class="page-item">
            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>
        </li>
    `;
    
    paginationContainer.style.display = 'block';
}

function changePage(page) {
    if (page < 1) return;
    currentPage = page;
    loadPublicBlocks();
}

// Update sort when dropdown changes
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('sortSelect').addEventListener('change', function() {
        currentSort = this.value;
        currentPage = 1;
        loadPublicBlocks();
    });
});

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>

<style>
.block-card {
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
}

.block-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-title {
    font-size: 1.1rem;
    font-weight: 600;
}

.badge {
    font-size: 0.75rem;
}

.btn-close-white {
    --bs-btn-close-color: #fff;
    --bs-btn-close-hover-color: #fff;
}
</style>

<!-- Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
