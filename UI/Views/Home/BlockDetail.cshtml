@{
    ViewData["Title"] = "Block Detail";
    var apiBaseUrl = "https://localhost:7174/";
    var blockId = ViewBag.BlockId;
    var isPublic = ViewBag.IsPublic;
}

<!-- Load Blockly script early -->
<script src="https://unpkg.com/blockly/blockly.min.js"></script>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 id="blockTitle">Loading...</h2>
            <div id="blockMeta" class="text-muted"></div>
        </div>
        <div>
            <a href="@Url.Action(ViewBag.IsPublic ? "SharedBlocks" : "MyBlocks", "Home")" class="btn btn-outline-secondary me-2">
                <i class="bi bi-arrow-left"></i> Back to @(ViewBag.IsPublic ? "Shared" : "My") Blocks
            </a>
            <button id="starBtn" class="btn btn-outline-warning me-2" onclick="starBlock()" style="display: none;" title="Star this block">
                <i class="bi bi-star"></i> Star
            </button>
            <button id="forkBtn" class="btn btn-outline-info me-2" onclick="forkBlock()" style="display: none;" title="Fork this block">
                <i class="bi bi-arrow-up-right-square"></i> Fork
            </button>
            <button id="settingsBtn" class="btn btn-outline-primary me-2" onclick="openSettings()" style="display: none;">
                <i class="bi bi-gear"></i> Settings
            </button>
            <button id="editModeBtn" class="btn btn-primary" onclick="toggleEditMode()" style="display: none;">
                <i class="bi bi-pencil"></i> <span id="editBtnText">Edit</span>
            </button>
        </div>
    </div>

    <div id="loadingState" class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading block...</p>
    </div>

    <div id="blockContent" style="display: none;">
        <div id="blocklyDiv" style="height: 400px; width: 100%; margin-bottom: 10px; border: 1px solid #ddd;"></div>
        
        <!-- View Mode Controls -->
        <div id="viewControls" class="mb-3">
            <button onclick="exportJson()" class="btn btn-secondary">Export</button>
            <button onclick="sendToApi()" class="btn btn-info ms-2">Generate Code</button>
            <span id="apiStatus" class="ms-3"></span>
        </div>
        
        <!-- Edit Mode Controls -->
        <div id="editControls" class="mb-3" style="display: none;">
            <button onclick="exportJson()" class="btn btn-secondary">Export</button>
            <button onclick="sendToApi()" class="btn btn-info ms-2">Generate Code</button>
            <button onclick="cancelEdit()" class="btn btn-outline-secondary ms-2">Cancel</button>
            <button onclick="saveChanges()" class="btn btn-success ms-2">Save Changes</button>
            <span id="editApiStatus" class="ms-3"></span>
        </div>
        
        <div style="position:relative;">
            <pre id="codeDisplay" style="background:#f8f9fa; padding:1em; margin-top:1em; white-space:pre-wrap; word-break:break-all;"></pre>
            <button id="copyCodeBtn" title="Copy code" style="position:absolute;top:10px;right:10px;z-index:2;background:transparent;border:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#888" viewBox="0 0 16 16">
                    <rect width="10" height="12" x="3" y="2" rx="2" fill="#eee" stroke="#888" stroke-width="1"/>
                    <rect width="8" height="10" x="4" y="3" rx="1" fill="none" stroke="#888" stroke-width="1"/>
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Update Block Modal -->
<div class="modal fade" id="updateBlockModal" tabindex="-1" aria-labelledby="updateBlockModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="updateBlockModalLabel">Update Block</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="updateBlockForm" onsubmit="return submitUpdateBlock(event)">
            <div class="mb-3">
                <label for="updateBlockName" class="form-label">Block Name</label>
                <input type="text" id="updateBlockName" class="form-control" required maxlength="200" />
            </div>
            <div class="mb-3">
                <label for="updateBlockTags" class="form-label">Tags</label>
                <input type="text" id="updateBlockTags" class="form-control" />
                <div class="form-text">Separate multiple tags with commas</div>
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="updateBlockPublic" />
                    <label class="form-check-label" for="updateBlockPublic">
                        <i class="bi bi-globe"></i> Make this block public
                    </label>
                    <div class="form-text">Public blocks can be viewed and forked by other users</div>
                </div>
            </div>
            <span id="updateStatus" class="text-danger"></span>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary w-100">Update Block</button>
            </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Settings Modal -->
<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="settingsModalLabel">Block Settings</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="settingsForm" onsubmit="return submitSettings(event)">
            <div class="mb-3">
                <label for="settingsBlockName" class="form-label">Block Name</label>
                <input type="text" id="settingsBlockName" class="form-control" required maxlength="200" />
            </div>
            <div class="mb-3">
                <label for="settingsBlockTags" class="form-label">Tags</label>
                <input type="text" id="settingsBlockTags" class="form-control" />
                <div class="form-text">Separate multiple tags with commas</div>
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="settingsBlockPublic" />
                    <label class="form-check-label" for="settingsBlockPublic">
                        <i class="bi bi-globe"></i> Make this block public
                    </label>
                    <div class="form-text">Public blocks can be viewed and forked by other users</div>
                </div>
            </div>
            <span id="settingsStatus" class="text-danger"></span>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary w-100">Save Settings</button>
            </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
var apiBaseUrl = '@apiBaseUrl';
var blockId = @blockId;
var isPublic = @Json.Serialize(isPublic);
var workspace;
var currentBlock = null;
var isEditMode = false;
var originalBlockContent = null; // Store original content for cancel functionality

const toolbox = `
<xml>
  <category name="Logic" colour="210">
    <block type="controls_if"></block>
    <block type="logic_compare"></block>
    <block type="logic_operation"></block>
    <block type="logic_negate"></block>
    <block type="logic_boolean"></block>
    <block type="logic_null"></block>
    <block type="logic_ternary"></block>
  </category>
  <category name="Loops" colour="120">
    <block type="controls_repeat_ext"></block>
    <block type="controls_whileUntil"></block>
    <block type="controls_for"></block>
    <block type="controls_forEach"></block>
    <block type="controls_flow_statements"></block>
  </category>
  <category name="Math" colour="230">
    <block type="math_number"></block>
    <block type="math_arithmetic"></block>
    <block type="math_single"></block>
    <block type="math_trig"></block>
    <block type="math_constant"></block>
    <block type="math_number_property"></block>
    <block type="math_round"></block>
    <block type="math_modulo"></block>
    <block type="math_random_int"></block>
    <block type="math_random_float"></block>
  </category>
  <category name="Text" colour="160">
    <block type="text"></block>
    <block type="text_join"></block>
    <block type="text_append"></block>
    <block type="text_length"></block>
    <block type="text_isEmpty"></block>
    <block type="text_indexOf"></block>
    <block type="text_charAt"></block>
    <block type="text_getSubstring"></block>
    <block type="text_changeCase"></block>
    <block type="text_trim"></block>
    <block type="text_print"></block>
  </category>
  <category name="Lists" colour="260">
    <block type="lists_create_with"></block>
    <block type="lists_repeat"></block>
    <block type="lists_length"></block>
    <block type="lists_isEmpty"></block>
  </category>
  <sep></sep>
  <category name="Variables" colour="330" custom="VARIABLE"></category>
  <category name="Functions" colour="290" custom="PROCEDURE"></category>
</xml>
`;

document.addEventListener('DOMContentLoaded', function() {
    loadBlock();
});

function loadBlock() {
    const jwt = localStorage.getItem("token");
    
    let apiUrl, headers = {};
    
    if (isPublic) {
        // For public blocks, use the public API endpoint
        apiUrl = apiBaseUrl + "api/blocks/public/" + blockId;
        // Add auth header if user is logged in to get star status
        if (jwt) {
            headers["Authorization"] = "Bearer " + jwt;
        }
    } else {
        // For private blocks, use the regular API endpoint with auth
        if (!jwt) {
            window.location.href = '@Url.Action("Index", "Home")';
            return;
        }
        apiUrl = apiBaseUrl + "api/blocks/" + blockId;
        headers["Authorization"] = "Bearer " + jwt;
    }

    fetch(apiUrl, {
        method: "GET",
        headers: headers
    })
    .then(res => {
        if (!res.ok) {
            throw new Error("Failed to load block");
        }
        return res.json();
    })
    .then(block => {
        currentBlock = block;
        displayBlock(block);
        initializeWorkspace(block);
    })
    .catch(err => {
        console.error("Error loading block:", err);
        document.getElementById('loadingState').innerHTML = 
            '<div class="alert alert-danger">Failed to load block. Please try again.</div>';
    });
}

function displayBlock(block) {
    document.getElementById('blockTitle').textContent = block.name;
    document.getElementById('blockMeta').innerHTML = `
        <div class="mb-2 d-flex align-items-center flex-wrap">
            <span class="badge ${block.isPublic ? 'bg-success' : 'bg-secondary'} me-2">
                <i class="bi ${block.isPublic ? 'bi-globe' : 'bi-lock'}"></i>
                ${block.isPublic ? 'Public' : 'Private'}
            </span>
            ${isPublic ? `<span class="text-muted me-3">
                <i class="bi bi-person"></i> by ${escapeHtml(block.ownerName)}
            </span>` : ''}
            <span class="text-muted me-3">
                <i class="bi bi-star"></i> ${block.starCount}
            </span>
            <span class="text-muted me-3">
                <i class="bi bi-arrow-up-right-square"></i> ${block.forkCount}
            </span>
        </div>
        <div class="mb-2">
            ${block.tags.map(tag => `<span class="badge bg-secondary me-1">${escapeHtml(tag)}</span>`).join('')}
        </div>
        ${block.forkedFromId ? `
        <div class="mb-2">
            <small class="text-success">
                <i class="bi bi-arrow-up-right-square"></i> Forked from 
                <strong>${escapeHtml(block.forkedFromName)}</strong> 
                by ${escapeHtml(block.forkedFromOwnerName)}
            </small>
        </div>
        ` : ''}
        <small>
            <i class="bi bi-calendar"></i> Created: ${new Date(block.createdAt).toLocaleDateString()}
            <i class="bi bi-pencil ms-3"></i> Updated: ${new Date(block.updatedAt).toLocaleDateString()}
        </small>
    `;
    
    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('blockContent').style.display = 'block';
    
    // Show appropriate buttons based on whether this is a public view or user's own block
    if (isPublic) {
        // For public blocks, show star and fork buttons (Phase 2/3 features)
        document.getElementById('starBtn').style.display = 'inline-block';
        document.getElementById('forkBtn').style.display = 'inline-block';
        document.getElementById('editModeBtn').style.display = 'none';
        document.getElementById('settingsBtn').style.display = 'none';
        
        // Update star button state based on whether user has starred this block
        const isStarred = block.isStarredByCurrentUser || false;
        updateStarButton(isStarred, block.starCount);
    } else {
        // For user's own blocks, show edit and settings
        document.getElementById('starBtn').style.display = 'none';
        document.getElementById('forkBtn').style.display = 'none';
        document.getElementById('editModeBtn').style.display = 'inline-block';
        document.getElementById('settingsBtn').style.display = 'inline-block';
    }
}

function initializeWorkspace(block) {
    // Ensure Blockly is loaded before initializing
    if (typeof Blockly === 'undefined') {
        console.error('Blockly is not loaded');
        return;
    }
    
    workspace = Blockly.inject('blocklyDiv', {
        toolbox: toolbox,
        readOnly: true
    });
    
    // Load the block content
    try {
        const blockData = JSON.parse(block.content);
        Blockly.serialization.workspaces.load(blockData, workspace);
    } catch (err) {
        console.error("Error loading block content:", err);
    }
}

function toggleEditMode() {
    // Ensure workspace is initialized
    if (!workspace) {
        console.error('Workspace is not initialized');
        return;
    }
    
    isEditMode = !isEditMode;
    const editBtn = document.getElementById('editBtnText');
    const viewControls = document.getElementById('viewControls');
    const editControls = document.getElementById('editControls');
    
    if (isEditMode) {
        // Store original content for cancel functionality
        originalBlockContent = Blockly.serialization.workspaces.save(workspace);
        
        // Dispose current workspace and create new one in edit mode
        workspace.dispose();
        workspace = Blockly.inject('blocklyDiv', {
            toolbox: toolbox,
            readOnly: false
        });
        
        // Restore content
        Blockly.serialization.workspaces.load(originalBlockContent, workspace);
        
        editBtn.textContent = 'View Only';
        viewControls.style.display = 'none';
        editControls.style.display = 'block';
        document.getElementById('editApiStatus').innerText = '';
    } else {
        // Dispose current workspace and create new one in view mode
        const currentContent = Blockly.serialization.workspaces.save(workspace);
        workspace.dispose();
        workspace = Blockly.inject('blocklyDiv', {
            toolbox: toolbox,
            readOnly: true
        });
        
        // Restore content
        Blockly.serialization.workspaces.load(currentContent, workspace);
        
        editBtn.textContent = 'Edit';
        viewControls.style.display = 'block';
        editControls.style.display = 'none';
        document.getElementById('apiStatus').innerText = '';
    }
}

function exportJson() {
    const json = Blockly.serialization.workspaces.save(workspace);
    document.getElementById("codeDisplay").innerText = JSON.stringify(json, null, 2);
}

function updateBlock() {
    if (!currentBlock) return;
    
    // Pre-fill the modal with current values
    document.getElementById('updateBlockName').value = currentBlock.name;
    document.getElementById('updateBlockTags').value = currentBlock.tags.join(', ');
    document.getElementById('updateBlockPublic').checked = currentBlock.isPublic;
    document.getElementById('updateStatus').innerText = '';
    
    var modal = new bootstrap.Modal(document.getElementById('updateBlockModal'));
    modal.show();
}

function submitUpdateBlock(e) {
    e.preventDefault();
    const jwt = localStorage.getItem("token");
    const blockName = document.getElementById('updateBlockName').value;
    const blockTags = document.getElementById('updateBlockTags').value;
    const isPublic = document.getElementById('updateBlockPublic').checked;
    const status = document.getElementById('updateStatus');
    status.innerText = '';
    
    if (!jwt) {
        status.innerText = 'Please login first.';
        return false;
    }
    
    const json = Blockly.serialization.workspaces.save(workspace);
    const tags = blockTags ? blockTags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
    
    fetch(apiBaseUrl + "api/blocks/" + blockId, {
        method: "PUT",
        headers: {
            "Authorization": "Bearer " + jwt,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            name: blockName,
            content: JSON.stringify(json),
            tags: tags,
            isPublic: isPublic
        })
    })
    .then(async res => {
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`Error ${res.status}: ${errorText}`);
        }
        return res.json();
    })
    .then(data => {
        currentBlock = data;
        displayBlock(data);
        status.innerText = '';
        var modal = bootstrap.Modal.getInstance(document.getElementById('updateBlockModal'));
        if (modal) modal.hide();
        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        document.body.classList.remove('modal-open');
        document.body.style = '';
        alert('Block updated successfully!');
    })
    .catch(err => {
        status.innerText = err.message || 'Update failed.';
    });
    return false;
}

function sendToApi() {
    const jwt = localStorage.getItem("token");
    const json = Blockly.serialization.workspaces.save(workspace);
    const statusElement = isEditMode ? document.getElementById("editApiStatus") : document.getElementById("apiStatus");
    statusElement.innerText = "";
    
    if (!jwt) {
        statusElement.innerText = "Please login first.";
        return;
    }
    
    fetch(apiBaseUrl + "api/translate", {
        method: "POST",
        headers: {
            "Authorization": "Bearer " + jwt,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(json)
    })
    .then(res => {
        if (!res.ok) throw new Error("API error: " + res.status);
        return res.text();
    })
    .then(code => {
        document.getElementById("codeDisplay").innerText = code;
        statusElement.innerText = "Success!";
    })
    .catch(err => {
        statusElement.innerText = err.message || "API error";
    });
}

function cancelEdit() {
    if (originalBlockContent) {
        // Restore the original content
        Blockly.serialization.workspaces.load(originalBlockContent, workspace);
    }
    
    // Exit edit mode
    toggleEditMode();
    document.getElementById('editApiStatus').innerText = '';
}

function saveChanges() {
    const jwt = localStorage.getItem("token");
    const statusElement = document.getElementById("editApiStatus");
    statusElement.innerText = "Saving changes...";
    
    if (!jwt) {
        statusElement.innerText = "Please login first.";
        return;
    }
    
    const json = Blockly.serialization.workspaces.save(workspace);
    
    fetch(apiBaseUrl + "api/blocks/" + blockId, {
        method: "PUT",
        headers: {
            "Authorization": "Bearer " + jwt,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            content: JSON.stringify(json)
        })
    })
    .then(async res => {
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`Error ${res.status}: ${errorText}`);
        }
        return res.json();
    })
    .then(data => {
        currentBlock = data;
        originalBlockContent = Blockly.serialization.workspaces.save(workspace);
        displayBlock(data);
        statusElement.innerText = "Changes saved successfully!";
        
        // Exit edit mode after successful save
        setTimeout(() => {
            toggleEditMode();
        }, 1500);
    })
    .catch(err => {
        statusElement.innerText = err.message || 'Save failed.';
    });
}

function openSettings() {
    if (!currentBlock) return;
    
    // Pre-fill the modal with current values
    document.getElementById('settingsBlockName').value = currentBlock.name;
    document.getElementById('settingsBlockTags').value = currentBlock.tags.join(', ');
    document.getElementById('settingsBlockPublic').checked = currentBlock.isPublic;
    document.getElementById('settingsStatus').innerText = '';
    
    var modal = new bootstrap.Modal(document.getElementById('settingsModal'));
    modal.show();
}

function submitSettings(e) {
    e.preventDefault();
    const jwt = localStorage.getItem("token");
    const blockName = document.getElementById('settingsBlockName').value;
    const blockTags = document.getElementById('settingsBlockTags').value;
    const isPublic = document.getElementById('settingsBlockPublic').checked;
    const status = document.getElementById('settingsStatus');
    status.innerText = '';
    
    if (!jwt) {
        status.innerText = 'Please login first.';
        return false;
    }
    
    const tags = blockTags ? blockTags.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
    
    fetch(apiBaseUrl + "api/blocks/" + blockId, {
        method: "PUT",
        headers: {
            "Authorization": "Bearer " + jwt,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            name: blockName,
            tags: tags,
            isPublic: isPublic
        })
    })
    .then(async res => {
        if (!res.ok) {
            const errorText = await res.text();
            throw new Error(`Error ${res.status}: ${errorText}`);
        }
        return res.json();
    })
    .then(data => {
        currentBlock = data;
        displayBlock(data);
        status.innerText = '';
        var modal = bootstrap.Modal.getInstance(document.getElementById('settingsModal'));
        if (modal) modal.hide();
        document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        document.body.classList.remove('modal-open');
        document.body.style = '';
        alert('Settings updated successfully!');
    })
    .catch(err => {
        status.innerText = err.message || 'Update failed.';
    });
    return false;
}

document.getElementById("copyCodeBtn").onclick = function() {
    const code = document.getElementById("codeDisplay").innerText;
    if (navigator.clipboard) {
        navigator.clipboard.writeText(code);
    } else {
        // fallback for old browsers
        const textarea = document.createElement("textarea");
        textarea.value = code;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand("copy");
        document.body.removeChild(textarea);
    }
};

// Star and Fork functionality (Phase 2 & 3)
function starBlock() {
    const jwt = localStorage.getItem("token");
    if (!jwt) {
        alert('Please login first to star blocks.');
        return;
    }

    const starBtn = document.getElementById('starBtn');
    const originalText = starBtn.innerHTML;
    starBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Starring...';
    starBtn.disabled = true;

    fetch(`${apiBaseUrl}api/blocks/${blockId}/star`, {
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + jwt,
            'Content-Type': 'application/json'
        }
    })
    .then(async res => {
        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.message || 'Failed to star block');
        }
        return res.json();
    })
    .then(result => {
        // Update the star count in the current block
        if (currentBlock) {
            currentBlock.starCount = result.starCount;
            displayBlock(currentBlock);
        }
        
        // Update button state
        updateStarButton(result.isStarred, result.starCount);
        
        // Show success feedback
        showToast('Block starred successfully!', 'success');
    })
    .catch(err => {
        console.error('Error starring block:', err);
        starBtn.innerHTML = originalText;
        starBtn.disabled = false;
        showToast(err.message || 'Failed to star block', 'error');
    });
}

function unstarBlock() {
    const jwt = localStorage.getItem("token");
    if (!jwt) {
        alert('Please login first.');
        return;
    }

    const starBtn = document.getElementById('starBtn');
    const originalText = starBtn.innerHTML;
    starBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Unstarring...';
    starBtn.disabled = true;

    fetch(`${apiBaseUrl}api/blocks/${blockId}/star`, {
        method: 'DELETE',
        headers: {
            'Authorization': 'Bearer ' + jwt,
            'Content-Type': 'application/json'
        }
    })
    .then(async res => {
        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.message || 'Failed to unstar block');
        }
        return res.json();
    })
    .then(result => {
        // Update the star count in the current block
        if (currentBlock) {
            currentBlock.starCount = result.starCount;
            displayBlock(currentBlock);
        }
        
        // Update button state
        updateStarButton(result.isStarred, result.starCount);
        
        // Show success feedback
        showToast('Block unstarred successfully!', 'success');
    })
    .catch(err => {
        console.error('Error unstarring block:', err);
        starBtn.innerHTML = originalText;
        starBtn.disabled = false;
        showToast(err.message || 'Failed to unstar block', 'error');
    });
}

function updateStarButton(isStarred, starCount) {
    const starBtn = document.getElementById('starBtn');
    if (!starBtn) return;

    starBtn.disabled = false;
    
    if (isStarred) {
        starBtn.className = 'btn btn-warning me-2';
        starBtn.innerHTML = '<i class="bi bi-star-fill"></i> Starred (' + starCount + ')';
        starBtn.onclick = unstarBlock;
        starBtn.title = 'Unstar this block';
    } else {
        starBtn.className = 'btn btn-outline-warning me-2';
        starBtn.innerHTML = '<i class="bi bi-star"></i> Star (' + starCount + ')';
        starBtn.onclick = starBlock;
        starBtn.title = 'Star this block';
    }
}

function forkBlock() {
    const jwt = localStorage.getItem("token");
    if (!jwt) {
        alert('Please login first to fork blocks.');
        return;
    }

    if (!currentBlock || !currentBlock.id) {
        alert('Block information not available.');
        return;
    }

    // Show fork modal
    showForkModal(currentBlock.id);
}

function showForkModal(blockId) {
    const block = currentBlock;
    if (!block) return;

    const modalHTML = `
        <div class="modal fade" id="forkModal" tabindex="-1" aria-labelledby="forkModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="forkModalLabel">Fork Block</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>You are about to create a fork of:</p>
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">${escapeHtml(block.name)}</h6>
                                <p class="card-text text-muted">by ${escapeHtml(block.ownerName)}</p>
                                <small class="text-muted">
                                    <i class="bi bi-star"></i> ${block.starCount} stars • 
                                    <i class="bi bi-arrow-up-right-square"></i> ${block.forkCount} forks
                                </small>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label for="forkName" class="form-label">Fork Name</label>
                            <input type="text" class="form-control" id="forkName" value="${escapeHtml(block.name)} (Fork)" placeholder="Enter name for your fork">
                        </div>
                        <div class="mt-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="forkPublic" checked>
                                <label class="form-check-label" for="forkPublic">
                                    Make fork public
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="performFork(${blockId})">Create Fork</button>
                    </div>
                </div>
            </div>
        </div>
    `;

    // Remove existing modal if any
    const existingModal = document.getElementById('forkModal');
    if (existingModal) {
        existingModal.remove();
    }

    // Add modal to DOM
    document.body.insertAdjacentHTML('beforeend', modalHTML);

    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('forkModal'));
    modal.show();

    // Clean up after hiding
    document.getElementById('forkModal').addEventListener('hidden.bs.modal', function() {
        this.remove();
    });
}

function performFork(blockId) {
    const jwt = localStorage.getItem("token");
    const forkName = document.getElementById('forkName').value.trim();
    const isPublic = document.getElementById('forkPublic').checked;

    if (!forkName) {
        alert('Please enter a name for your fork.');
        return;
    }

    const forkBtn = document.querySelector('.modal-footer .btn-primary');
    const originalText = forkBtn.innerHTML;
    forkBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Creating Fork...';
    forkBtn.disabled = true;

    fetch(`${apiBaseUrl}api/blocks/${blockId}/fork`, {
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + jwt,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            name: forkName,
            isPublic: isPublic
        })
    })
    .then(async res => {
        if (!res.ok) {
            const errorData = await res.json();
            throw new Error(errorData.message || 'Failed to fork block');
        }
        return res.json();
    })
    .then(result => {
        // Hide modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('forkModal'));
        modal.hide();
        
        // Update fork count in UI
        if (currentBlock) {
            currentBlock.forkCount = result.totalForks;
            updateForkCount(result.totalForks);
        }

        showToast('Block forked successfully!', 'success');
        
        // Optionally redirect to the new fork
        setTimeout(() => {
            if (confirm('Fork created successfully! Would you like to edit your new fork?')) {
                window.location.href = `/Home/BlockEditor?id=${result.forkId}`;
            }
        }, 1000);
    })
    .catch(err => {
        console.error('Error forking block:', err);
        forkBtn.innerHTML = originalText;
        forkBtn.disabled = false;
        showToast('Failed to fork block: ' + err.message, 'error');
    });
}

function updateForkCount(newCount) {
    const forkBtn = document.getElementById('forkBtn');
    if (forkBtn) {
        const forkText = forkBtn.innerHTML.replace(/\d+/, newCount);
        forkBtn.innerHTML = forkText;
    }
}

function showToast(message, type) {
    // Create toast element
    const toastContainer = document.getElementById('toastContainer') || createToastContainer();
    const toastId = 'toast-' + Date.now();
    const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
    
    const toastHTML = `
        <div id="${toastId}" class="toast ${bgClass} text-white" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);
    
    // Initialize and show toast
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement, { delay: 3000 });
    toast.show();
    
    // Remove element after hiding
    toastElement.addEventListener('hidden.bs.toast', () => {
        toastElement.remove();
    });
}

function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toastContainer';
    container.className = 'toast-container position-fixed top-0 end-0 p-3';
    container.style.zIndex = '1080';
    document.body.appendChild(container);
    return container;
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>

<!-- Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
