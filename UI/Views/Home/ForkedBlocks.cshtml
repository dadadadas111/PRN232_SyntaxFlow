@{
    ViewData["Title"] = "Forked Blocks";
    var apiBaseUrl = "https://localhost:7174/";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>My Forked Blocks</h2>
                <small class="text-muted">Blocks you have forked from others</small>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Loading your forked blocks...</p>
    </div>

    <!-- Error State -->
    <div id="errorState" class="alert alert-danger text-center py-5" style="display: none;">
        <i class="bi bi-exclamation-triangle fs-1 text-danger"></i>
        <h4>Error Loading Blocks</h4>
        <p id="errorMessage">Something went wrong while loading your forked blocks.</p>
        <button class="btn btn-outline-danger" onclick="loadForkedBlocks()">
            <i class="bi bi-arrow-clockwise"></i> Try Again
        </button>
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-5" style="display: none;">
        <i class="bi bi-arrow-up-right-square fs-1 text-muted"></i>
        <h4>No Forked Blocks Yet</h4>
        <p class="text-muted">You haven't forked any blocks yet. Explore public blocks to find something interesting to fork!</p>
        <a href="/Home/SharedBlocks" class="btn btn-primary">
            <i class="bi bi-search"></i> Explore Public Blocks
        </a>
    </div>

    <!-- Blocks Grid -->
    <div id="blocksContainer" class="row" style="display: none;">
        <!-- Blocks will be loaded here -->
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

<script>
var apiBaseUrl = '@apiBaseUrl';
let forkedBlocks = [];

document.addEventListener('DOMContentLoaded', function() {
    loadForkedBlocks();
});

function loadForkedBlocks() {
    showLoading();
    
    fetch(`${apiBaseUrl}api/blocks/forked`, {
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
    })
    .then(response => {
        if (!response.ok) {
            if (response.status === 401) {
                window.location.href = '/Account/Login';
                return;
            }
            throw new Error(`HTTP ${response.status}`);
        }
        return response.json();
    })
    .then(blocks => {
        forkedBlocks = blocks;
        displayBlocks(blocks);
    })
    .catch(error => {
        console.error('Error loading forked blocks:', error);
        showError(error.message);
    });
}

function displayBlocks(blocks) {
    const container = document.getElementById('blocksContainer');
    
    if (blocks.length === 0) {
        showEmpty();
        return;
    }
    
    container.innerHTML = blocks.map(block => `
        <div class="col-md-6 col-lg-4 mb-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h5 class="card-title mb-0" style="cursor: pointer;" onclick="viewBlock(${block.id})">
                            ${block.name}
                        </h5>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-three-dots"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="viewBlock(${block.id})">
                                    <i class="bi bi-eye"></i> View
                                </a></li>
                                <li><a class="dropdown-item" href="#" onclick="editBlock(${block.id})">
                                    <i class="bi bi-pencil"></i> Edit
                                </a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="#" onclick="deleteBlock(${block.id})">
                                    <i class="bi bi-trash"></i> Delete
                                </a></li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="mb-2">
                        <small class="text-muted">
                            <i class="bi bi-arrow-up-right-square"></i> Forked block
                        </small>
                        ${block.forkedFromId ? `
                        <div class="mt-1">
                            <small class="text-warning">
                                <strong>Original:</strong> ${block.forkedFromName} 
                                by ${block.forkedFromOwnerName}
                            </small>
                        </div>
                        ` : ''}
                    </div>
                    
                    <div class="mb-3">
                        ${block.tags.map(tag => `<span class="badge bg-secondary me-1">${tag}</span>`).join('')}
                    </div>
                    
                    <div class="row text-center border-top pt-3">
                        <div class="col">
                            <small class="text-muted">Stars</small><br>
                            <strong>${block.starCount}</strong>
                        </div>
                        <div class="col">
                            <small class="text-muted">Forks</small><br>
                            <strong>${block.forkCount}</strong>
                        </div>
                        <div class="col">
                            <small class="text-muted">Visibility</small><br>
                            <span class="badge ${block.isPublic ? 'bg-success' : 'bg-secondary'}">
                                ${block.isPublic ? 'Public' : 'Private'}
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="card-footer bg-transparent">
                    <small class="text-muted">
                        Created ${new Date(block.createdAt).toLocaleDateString()}
                        ${block.updatedAt !== block.createdAt ? `â€¢ Updated ${new Date(block.updatedAt).toLocaleDateString()}` : ''}
                    </small>
                </div>
            </div>
        </div>
    `).join('');
    
    showBlocks();
}

function viewBlock(blockId) {
    window.location.href = `/Home/BlockDetail?id=${blockId}`;
}

function editBlock(blockId) {
    window.location.href = `/Home/BlockEditor?id=${blockId}`;
}

function deleteBlock(blockId) {
    const block = forkedBlocks.find(b => b.id === blockId);
    if (!block) return;
    
    if (confirm(`Are you sure you want to delete the forked block "${block.name}"? This action cannot be undone.`)) {
        fetch(`${apiBaseUrl}api/blocks/${blockId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        })
        .then(response => {
            if (response.ok) {
                // Remove the block from UI
                const blockElement = document.querySelector(`[onclick*="viewBlock(${blockId})"]`).closest('.col-md-6');
                if (blockElement) {
                    blockElement.remove();
                }
                
                // Update the blocks array
                forkedBlocks = forkedBlocks.filter(b => b.id !== blockId);
                
                // Check if no blocks left
                if (forkedBlocks.length === 0) {
                    showEmpty();
                }
                
                showToast('Forked block deleted successfully!', 'success');
            } else {
                throw new Error('Failed to delete block');
            }
        })
        .catch(err => {
            console.error('Error deleting block:', err);
            showToast('Failed to delete block', 'error');
        });
    }
}

function showLoading() {
    document.getElementById('loadingState').style.display = 'block';
    document.getElementById('errorState').style.display = 'none';
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('blocksContainer').style.display = 'none';
}

function showError(message) {
    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('errorState').style.display = 'block';
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('blocksContainer').style.display = 'none';
    document.getElementById('errorMessage').textContent = message;
}

function showEmpty() {
    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('errorState').style.display = 'none';
    document.getElementById('emptyState').style.display = 'block';
    document.getElementById('blocksContainer').style.display = 'none';
}

function showBlocks() {
    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('errorState').style.display = 'none';
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('blocksContainer').style.display = 'block';
}

function showToast(message, type) {
    // Create toast element
    const toastContainer = document.getElementById('toastContainer') || createToastContainer();
    const toastId = 'toast-' + Date.now();
    const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
    
    const toastHTML = `
        <div id="${toastId}" class="toast ${bgClass} text-white" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `;
    
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);
    
    // Show toast
    const toastElement = document.getElementById(toastId);
    const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
    toast.show();
    
    // Remove from DOM after hiding
    toastElement.addEventListener('hidden.bs.toast', () => {
        toastElement.remove();
    });
}

function createToastContainer() {
    const container = document.createElement('div');
    container.id = 'toastContainer';
    container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
    document.body.appendChild(container);
    return container;
}
</script>
